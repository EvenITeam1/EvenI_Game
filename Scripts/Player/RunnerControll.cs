//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
<<<<<<< HEAD
//     from Assets/Project_2DRunner/RunnerControll.inputactions
=======
//     from Assets/Scripts/Player/RunnerControll.inputactions
>>>>>>> develop2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RunnerControll : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RunnerControll()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RunnerControll"",
    ""maps"": [
        {
            ""name"": ""TwoDimensions"",
            ""id"": ""64845705-c0d1-4874-ab85-bf9b96868706"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""9f2b95e0-4aef-46e7-865b-8c82ee35d31f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ba3ee0dc-98d4-4609-8b0e-a3fd8042e77f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fad51e89-0e83-4aea-98d0-e1a735b25b7e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""684db832-fd17-4d2e-afff-97f9f082bd11"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b88e3894-caec-471c-ae39-75d834baf5c8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9ec99703-2873-4461-9f6d-ee9bc156970b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TwoDimensions
        m_TwoDimensions = asset.FindActionMap("TwoDimensions", throwIfNotFound: true);
        m_TwoDimensions_Movement = m_TwoDimensions.FindAction("Movement", throwIfNotFound: true);
        m_TwoDimensions_Jump = m_TwoDimensions.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TwoDimensions
    private readonly InputActionMap m_TwoDimensions;
    private ITwoDimensionsActions m_TwoDimensionsActionsCallbackInterface;
    private readonly InputAction m_TwoDimensions_Movement;
    private readonly InputAction m_TwoDimensions_Jump;
    public struct TwoDimensionsActions
    {
        private @RunnerControll m_Wrapper;
        public TwoDimensionsActions(@RunnerControll wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_TwoDimensions_Movement;
        public InputAction @Jump => m_Wrapper.m_TwoDimensions_Jump;
        public InputActionMap Get() { return m_Wrapper.m_TwoDimensions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TwoDimensionsActions set) { return set.Get(); }
        public void SetCallbacks(ITwoDimensionsActions instance)
        {
            if (m_Wrapper.m_TwoDimensionsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_TwoDimensionsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_TwoDimensionsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_TwoDimensionsActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_TwoDimensionsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_TwoDimensionsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_TwoDimensionsActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_TwoDimensionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public TwoDimensionsActions @TwoDimensions => new TwoDimensionsActions(this);
    public interface ITwoDimensionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
